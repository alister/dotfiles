[user]
    name = Alister Bulman
    email = abulman@gmail.com
[github]
    user = alister
[core]
    excludesfile = <%= ENV['HOME'] %>/.gitignore
    editor = <%= ENV['EDITOR'] ||= 'joe' %>
    autocrlf = input
    #filemode = false

    # Treat spaces before tabs, lines that are indented with 8 or more spaces as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
[alias]
    amend = commit --amend
    br = branch
    ci = commit
    cloner = clone --recursive
    co = checkout
    df = diff --patch-with-stat --word-diff --find-renames
    dfs = diff --staged --patch-with-stat --word-diff --find-renames
    head = !"git log -n1"
    l =   "log       --graph --pretty=oneline -n 20 --abbrev-commit"
    lg =  "log       --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%Cred%cn%Cgreen:%cr)%Creset' --abbrev-commit --date=relative"
    lgg = "log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%Cred%cn%Cgreen:%cr)%Creset' --abbrev-commit --date=relative"
    # Fully commits log with statistic
    ll = "log --stat --abbrev-commit"
    # Show the log with stats, but without merges
    lc = log ORIG_HEAD.. --stat --no-merges

    # show the complete commit, with full details
    showf = show --format=fuller

    pl = pull --rebase
    ready = rebase -i @{u}
    s = status -s
    st = status -sb
    unstage = reset HEAD
    ## parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"

    # Show verbose output about tags, branches or remotes, with summary commit
    branches = branch -a -v
    remotes = remote -v
    tags = tag -l

    #up = "!git remote update -p; git merge --ff-only @{u}"
    # prefer from https://github.com/tj/git-extras #standup = log ––since yesterday ––author alister

    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
    ours   = "!f() { git checkout --ours $@ && git add \"$@\"; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add \"$@\"; }; f"
    pushnotes = !sh -c 'git push $1 "refs/notes/*"' -
    fetchnotes = !sh -c 'git fetch $1 "refs/notes/*:refs/notes/*"' -
    taglist = !"git for-each-ref \
        --sort=taggerdate \
        --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags \
        | awk 'BEGIN { FS = \"_,,,_\"  } ; { t=strftime(\"%Y-%m-%d  %H:%M\",$2); printf \"%-20s %-18s %-25s %s\\n\", t, $1, $4, $3  }'"

    rebc   = rebase --continue
    rebt   = rebase --abort
    rebs   = rebase --skip

    # https://github.com/blueyed/dotfiles/commit/5c4e4be9fc6a56d1ccbc16398ac3fef007d5cc47 "add 'rl' alias for reflog with relative date"
    #   Also see: [pretty].reflog
    rl = reflog --pretty=reflog

    ## From https://wynnnetherland.com/journal/extending-the-command-line/
    # List files known to Git
    ls = ls-files
    # Get short SHA-1 for object
    hash = rev-parse --short HEAD

    # See https://difftastic.wilfred.me.uk/git.html#regular-usage
    # `git dft` is less to type than `git difftool`.
    dft = difftool
    dfts = difftool --staged

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto
[apply]
    whitespace = nowarn
[color "diff"]
    meta = blue bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "branch"]
    current = yellow reverse
    local = yellow bold
    remote = green bold
    plain = red bold
[color "status"]
    added = yellow
    changed = green bold
    untracked = blue bold
[fetch]
    # Any git fetch or git pull will automatically prune.
    prune = true
[format]
    pretty = %C(yellow)%h%Creset %s %C(red)(%an, %cr)%Creset
[push]
    default = simple
    autoSetupRemote = true
[pull]
    rebase = true
[rebase]
    autoStash = true
[rerere]
    # https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67#.iloud2jeo
    enabled = true
[diff]
    # https://difftastic.wilfred.me.uk/git.html#regular-usage
    tool = difftastic

    # Tell git diff to use mnemonic prefixes (index, work tree, commit, object) instead of the standard a and b notation:
    mnemonicprefix = true
    # Allow git diff to do basic rename and copy detection:
    renames = copies
    noprefix = true

[init]
    defaultBranch = main
# File must exist: https://stackoverflow.com/questions/70435937/git-blame-with-optional-ignorerevsfile
#[blame]
#    ignoreRevsFile = .git-blame-ignore-revs

[pretty]
    # See: https://github.com/blueyed/dotfiles/commit/5c4e4be9fc6a56d1ccbc16398ac3fef007d5cc47 and alias 'rl', above
    # reflog, with relative date:
    reflog = %C(auto)%h %<|(17)%gd %<|(30)%C(blue)%cr%C(reset) %s
    ; reflog = %C(auto)%h %<|(17)%gd %C(blue)%ci%C(reset) %s

# https://difftastic.wilfred.me.uk/git.html#regular-usage
# Se also section: [diff]
[difftool]
    prompt = false
[difftool "difftastic"]
    cmd = difft "$LOCAL" "$REMOTE"
[pager]
    difftool = true
[tag]
    sort = version:refname
