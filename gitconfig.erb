[user]
	name = <%= print("Your Name: "); STDOUT.flush; STDIN.gets.chomp %>
	email = <%= print("Your Email: "); STDOUT.flush; STDIN.gets.chomp %>
[github]
	user = <%= print("GitHub Username: "); STDOUT.flush; STDIN.gets.chomp %>
[core]
	excludesfile = <%= ENV['HOME'] %>/.gitignore
	editor = <%= ENV['EDITOR'] ||= 'joe' %>
	autocrlf = input
	filemode = false

    # Treat spaces before tabs, lines that are indented with 8 or more spaces as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
[alias]
    br = branch
    ci = commit
    cloner = clone --recursive
    co = checkout
    df = diff --patch-with-stat --word-diff
    dfs = diff --staged --patch-with-stat --word-diff
    head = !"git log -n1"
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    lg = "log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%Cred%cn%Cgreen:%cr)%Creset' --abbrev-commit --date=relative"
    pr = pull --rebase
    ready = rebase -i @{u}
    s = status -s
    st = status -sb
    standup = log ––since yesterday ––author alister
    unstage = reset HEAD
    #up = "!git remote update -p; git merge --ff-only @{u}"

    # Show verbose output about tags, branches or remotes
    branches = branch -a
    remotes = remote -v
    tags = tag -l

	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
	ours   = "!f() { git checkout --ours $@ && git add \"$@\"; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add \"$@\"; }; f"
	pushnotes = !sh -c 'git push $1 "refs/notes/*"' -
	fetchnotes = !sh -c 'git fetch $1 "refs/notes/*:refs/notes/*"' -
    taglist = !"git for-each-ref \
        --sort=taggerdate \
        --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags \
        | awk 'BEGIN { FS = \"_,,,_\"  } ; { t=strftime(\"%Y-%m-%d  %H:%M\",$2); printf \"%-20s %-18s %-25s %s\\n\", t, $1, $4, $3  }'"

[color]
	diff = auto
	status = auto
	branch = auto
[apply]
	whitespace = nowarn
[format]
	pretty = %C(yellow)%h%Creset %s %C(red)(%an, %cr)%Creset
[color]
	ui = auto
[color "diff"]
	meta = blue bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "branch"]
	current = yellow reverse
	local = yellow bold
	remote = green bold
	plain = red bold
[color "status"]
	added = yellow
	changed = green bold
	untracked = blue bold
[push]
	default = simple
